// <auto-generated />
using System;
using DataAccess.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(OperationsDepartmentContext))]
    partial class OperationsDepartmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.CaseOperation", b =>
                {
                    b.Property<int>("CaseOperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Case_Operation_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseOperationId"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("Case_ID");

                    b.Property<DateTime?>("EndOfOperation")
                        .HasColumnType("datetime")
                        .HasColumnName("End_of_Operation");

                    b.Property<int?>("OperationId")
                        .HasColumnType("int")
                        .HasColumnName("Operation_ID");

                    b.Property<DateTime>("StartOfOperation")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_of_Operation");

                    b.HasKey("CaseOperationId")
                        .HasName("PK__Case_Ope__EA267F41F48FC149");

                    b.HasIndex("CaseId");

                    b.HasIndex("OperationId");

                    b.ToTable("Case_Operations", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Diagnosis", b =>
                {
                    b.Property<int>("DiagnoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Diagnose_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnoseId"));

                    b.Property<string>("DiagnoseDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Diagnose_Description");

                    b.HasKey("DiagnoseId")
                        .HasName("PK__Diagnose__E7B4E19532AF3369");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("DataAccess.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Doctor_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("Doctor_Name")
                        .IsFixedLength();

                    b.Property<string>("DoctorSurname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("Doctor_Surname")
                        .IsFixedLength();

                    b.HasKey("DoctorId")
                        .HasName("PK__Doctors__E59B530F9FFBCB71");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DataAccess.Entities.DoctorsInCaseOperation", b =>
                {
                    b.Property<int?>("CaseOperationId")
                        .HasColumnType("int")
                        .HasColumnName("Case_Operation_ID");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_ID");

                    b.Property<DateTime?>("EndOfOperating")
                        .HasColumnType("datetime")
                        .HasColumnName("End_of_Operating");

                    b.Property<DateTime>("StartOfOperating")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_of_Operating");

                    b.HasIndex("CaseOperationId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Doctors_In_Case_Operation", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.DoctorsInChargeOfCase", b =>
                {
                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("Case_ID");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_ID");

                    b.HasIndex("CaseId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Doctors_In_Charge_of_Case", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Insurance_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceId"));

                    b.Property<decimal>("InsuranceCoverageAmount")
                        .HasColumnType("money")
                        .HasColumnName("Insurance_Coverage_Amount");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Insurance_Name");

                    b.HasKey("InsuranceId")
                        .HasName("PK__Insuranc__FFF09853E0CE8523");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("DataAccess.Entities.MedicalCase", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Case_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseId"));

                    b.Property<DateTime?>("CaseEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Case_End_Date");

                    b.Property<DateTime>("CaseStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Case_Start_Date");

                    b.Property<int?>("DiagnoseId")
                        .HasColumnType("int")
                        .HasColumnName("Diagnose_ID");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("Insurance_ID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_ID");

                    b.HasKey("CaseId")
                        .HasName("PK__Medical___D062FC05E7749D43");

                    b.HasIndex("DiagnoseId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("PatientId");

                    b.ToTable("Medical_Cases", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Operation", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Operation_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationId"));

                    b.Property<decimal>("OperationCost")
                        .HasColumnType("money")
                        .HasColumnName("Operation_Cost");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Operation_Name");

                    b.HasKey("OperationId")
                        .HasName("PK__Operatio__D9469EE7C7BA71EA");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("DataAccess.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Patient_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateOnly>("PatientDateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("Patient_Date_of_Birth");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("Patient_Name")
                        .IsFixedLength();

                    b.Property<string>("PatientPatronymic")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("Patient_Patronymic")
                        .IsFixedLength();

                    b.Property<string>("PatientSurname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("Patient_Surname")
                        .IsFixedLength();

                    b.HasKey("PatientId")
                        .HasName("PK__Patients__C1A88B597C7CA551");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DataAccess.Entities.Research", b =>
                {
                    b.Property<int>("ResearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Research_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResearchId"));

                    b.Property<decimal>("ResearchCost")
                        .HasColumnType("money")
                        .HasColumnName("Research_Cost");

                    b.Property<string>("ResearchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("Research_Name")
                        .IsFixedLength();

                    b.Property<string>("ResearchNormalValues")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Research_Normal_Values");

                    b.HasKey("ResearchId")
                        .HasName("PK__Research__7B1735FA1A989E0C");

                    b.ToTable("Researches");
                });

            modelBuilder.Entity("DataAccess.Entities.ResearchesInCase", b =>
                {
                    b.Property<int>("LaboratoryResearchInCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Laboratory_Research_In_Case_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LaboratoryResearchInCaseId"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("Case_ID");

                    b.Property<DateTime>("ResearchDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("Research_Datetime");

                    b.Property<int?>("ResearchId")
                        .HasColumnType("int")
                        .HasColumnName("Research_ID");

                    b.Property<string>("ResearchResult")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Research_Result");

                    b.HasKey("LaboratoryResearchInCaseId")
                        .HasName("PK__Research__9C185E944840DA64");

                    b.HasIndex("CaseId");

                    b.HasIndex("ResearchId");

                    b.ToTable("Researches_In_Case", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.CaseOperation", b =>
                {
                    b.HasOne("DataAccess.Entities.MedicalCase", "Case")
                        .WithMany("CaseOperations")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK__Case_Oper__Case___66603565");

                    b.HasOne("DataAccess.Entities.Operation", "Operation")
                        .WithMany("CaseOperations")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK__Case_Oper__Opera__6754599E");

                    b.Navigation("Case");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("DataAccess.Entities.DoctorsInCaseOperation", b =>
                {
                    b.HasOne("DataAccess.Entities.CaseOperation", "CaseOperation")
                        .WithMany()
                        .HasForeignKey("CaseOperationId")
                        .HasConstraintName("FK__Doctors_I__Case___693CA210");

                    b.HasOne("DataAccess.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK__Doctors_I__Docto__6A30C649");

                    b.Navigation("CaseOperation");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DataAccess.Entities.DoctorsInChargeOfCase", b =>
                {
                    b.HasOne("DataAccess.Entities.MedicalCase", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK__Doctors_I__Case___628FA481");

                    b.HasOne("DataAccess.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK__Doctors_I__Docto__6383C8BA");

                    b.Navigation("Case");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DataAccess.Entities.MedicalCase", b =>
                {
                    b.HasOne("DataAccess.Entities.Diagnosis", "Diagnose")
                        .WithMany("MedicalCases")
                        .HasForeignKey("DiagnoseId")
                        .HasConstraintName("FK__Medical_C__Diagn__60A75C0F");

                    b.HasOne("DataAccess.Entities.Insurance", "Insurance")
                        .WithMany("MedicalCases")
                        .HasForeignKey("InsuranceId")
                        .HasConstraintName("FK__Medical_C__Insur__5FB337D6");

                    b.HasOne("DataAccess.Entities.Patient", "Patient")
                        .WithMany("MedicalCases")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK__Medical_C__Patie__5EBF139D");

                    b.Navigation("Diagnose");

                    b.Navigation("Insurance");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataAccess.Entities.ResearchesInCase", b =>
                {
                    b.HasOne("DataAccess.Entities.MedicalCase", "Case")
                        .WithMany("ResearchesInCases")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK__Researche__Case___6D0D32F4");

                    b.HasOne("DataAccess.Entities.Research", "Research")
                        .WithMany("ResearchesInCases")
                        .HasForeignKey("ResearchId")
                        .HasConstraintName("FK__Researche__Resea__6E01572D");

                    b.Navigation("Case");

                    b.Navigation("Research");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DataAccess.Entities.Diagnosis", b =>
                {
                    b.Navigation("MedicalCases");
                });

            modelBuilder.Entity("DataAccess.Entities.Insurance", b =>
                {
                    b.Navigation("MedicalCases");
                });

            modelBuilder.Entity("DataAccess.Entities.MedicalCase", b =>
                {
                    b.Navigation("CaseOperations");

                    b.Navigation("ResearchesInCases");
                });

            modelBuilder.Entity("DataAccess.Entities.Operation", b =>
                {
                    b.Navigation("CaseOperations");
                });

            modelBuilder.Entity("DataAccess.Entities.Patient", b =>
                {
                    b.Navigation("MedicalCases");
                });

            modelBuilder.Entity("DataAccess.Entities.Research", b =>
                {
                    b.Navigation("ResearchesInCases");
                });
#pragma warning restore 612, 618
        }
    }
}
